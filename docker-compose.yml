version: '3.7'

services:
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
        - "9000:9000"
        - "9001:9001"
    command: server --console-address ":9001" /data/ --address ':9000'
    environment:
      - MINIO_ROOT_USER=${MINIO_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD}
    volumes:
        - minio_data:/data
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 1s
      timeout: 10s
      retries: 5
    restart: always

  minio-create-bucket:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      bash -c "
      mc alias set minio http://minio:9000 ${MINIO_USER} ${MINIO_PASSWORD} &&
      if ! mc ls minio | grep --quiet bucket; then
        mc mb minio/mlflow
      else
        echo 'Bucket mlflow already exists'
      fi
      "

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTRGRES_PASSWORD}
      - POSTGRES_DB=mlflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always

  mlflow:
    build: ./mlflow
    image: mlflow
    container_name: mlflow
    depends_on: ["minio-create-bucket", "postgres"]
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${MINIO_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_PASSWORD}
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5000
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/mlflow
      --artifacts-destination s3://mlflow
      --gunicorn-opts "--log-level debug"
    restart: always

volumes:
  postgres_data:
  minio_data:
